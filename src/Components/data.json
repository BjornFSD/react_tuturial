[
        {
            "id": 1,
        "title": "Czym jest react?",
        "desc": "React JS jest kolejną biblioteką JavaScript używaną do budowania interaktywnych stron internetowych. Dla zrozumienia zróbmy krok w tym i zobaczmy z czym to się je. "
        ,"subtitle": "\n Do czego służy JavaScript? \n \n",
        "desc_2": "JS używany jest do tworzenia i kontrolowania dynamicznych stron. \n  Dynamiczne strony zawierają rzeczy jak animowane grafiki, pokaz slajdów zdjęć oraz interaktywne formularze.\n \n Za każdym razem, gdy odwiedzasz stronę internetową, na której rzeczy się poruszają, odświeżają lub w inny sposób zmieniają się na Twoim ekranie, nie wymagając od Ciebie ręcznego przeładowania strony internetowej, istnieje bardzo duża szansa, że JS jest językiem, w którym to się dzieje."        
        },

        {
            "id": 2,
        "title": "Dlaczego developersi używają ReactJS?",
        "desc": "Biblioteka React specjalizuje się w pomaganiu developerom budowania interfejsu użytkownika. Jeśli chodzi o strony i aplikacje internetowe, interfejsty są zbiorem menu ekranowych, wyszukiwarek, przycisków i innych elementów, z którymi ktoś wchodzi w interakcję, aby korzystać z witryny lub aplikacji.",
        "desc_2": "Przed ReactJS, developerzy często zatrzymywali się na budowaniu inferfejsu w czystym JavaScript lub z mniej sfokusowanym na interfejs jQuery, przez co popełniali więcej bugów i błędów. React posiada dwie kluczowe funkcje, które zwiększają jego atrakcyjność dla developerów: \n \n  -JSX \n  -Virtual DOM \n \n Przejdźmy do wyżej podanych zagadnień, aby lepiej zrozumieć ReactJS"
    },
    {
            "id": 3,
         "title": "JSX",
         "desc": "Podstawą podstaw każdej strony jest dokument HTML. Przeglądarki czytają te dokumenty i naturalnie wyświetlają je na twoim urządzeniu. W trakcie procesu tworzą obiektowy model dokumentu tzw. DOM, czyli drzewo które reprezentuje sposób ułożenia strony internetowej. Do tego deweloperzy mogą dodawać dynamiczną zawartość do swoich projektów poprzez modyfikację DOM za pomocą m.in. JavaScript.",
         "desc_2": "JSX(JavaScript eXtension) jest rozszerzeniem React, które zdecydowanie ułatwia im modyfikowanie DOM za pomocą prostego kodu w stylu HTML. JSX jest kompatybilny z każdą platformą, z którą może pracować. \n \n Nie jest to jednak tylko kwesta wygody, używanie JSX do aktualizacji DOM-u prowadzi do znaczącej poprawy wydajności strony i efektywności rozwoju, chodzi o kolejną funkcję jaką zaprezentuje, Virtual DOM."
     },
     {
        "id": 4,
     "title": "Virtual DOM",
        "desc": "Jeśli nie używasz React JS (i JSX), Twoja strona użyje HTML do aktualizacji DOM (proces, który sprawia, że rzeczy zmieniają się na ekranie bez konieczności ręcznego odświeżania strony). Działa to dobrze dla prostych, statycznych stron internetowych, ale dla dynamicznych stron, które wymagają intensywnej interakcji z użytkownikiem, może stać się problemem (ponieważ cały DOM musi się przeładowywać za każdym razem, gdy użytkownik kliknie funkcję wymagającą odświeżenia strony). \n \n Jednakże jeśli developerzy używają JSX do manipulacji i aktualizacji DOM-u, ReactJS tworzy coś co nazywa się Virtual DOM. Jest on kopią strony DOM, a React JS używa tej kopii, aby zobaczyc, które części rzeczywistego DOM muszą się zmienić gdy takie zdarzenie ma miejsce i je podmienia np. kliknięcie jakiegoś przycisku. \n Ten rodzaj selektywnej aktualizacji zajmuje mniej czasu i mniej mocy obliczeniowej, co jest bardziej odczuwalne na większej skali projektu. \n \n"
        , "img": "./img/VirtualDOM.png"
 
    },
    {
    "id": 5,
    "title": "Komponenty i ich podział",
    "desc": "Komponenty pozwalają podzielić interfejs użytkownika na niezależne, pozwalające na ponowne użycie części i myśleć o każdej z nich osobno. Komponenty przyjmują wartości na wejściu zwane propsami i zwracają reactowe elementy. \n \n",
    "img": "./img/component.png",
    "desc_2": "\n Na powyższym zdjęciu możemy zauważyć jak rozdzielone są komponenty, aby kod był bardziej czytelny i daję nam również swobodę poruszania się pomiędzy plikami. \n \n \n \n "
    ,"img_2": "./img/componentProps.png",
    "desc_3": "\n Z kolei tutaj mamy przykład wykorzystania komponentu, renderowanie tego komponentu oraz wykorzystanie właściwości w danych komponentach. Takie komponenty nazywamy “komponentami funkcyjnymi”, gdyż są one dosłownie javascriptowymi funkcjami."
} ,
{
    "id": 6,
    "title": "Zdarzenia, eventy JS - React",
    "desc": "Czym są zdarzenia? Większość interakcji na stronie internetowej czy aplikacji opiera się o zdarzenia(eventy). W czystym JavaScript, aby móc obsługiwać eventy używamy do tego przeznaczonych funkcji, które tworzą i usuwają tzw. event listenery. Raczej jest to wiadome jak wygląda składnia, ale przyjrzyjmy się jej dla przypomnienia. \n \n "
    ,"subtitle": "JavaScript \n \n"
    ,"img":"./img/eventJS.png",
    "desc_2": "\n Wyżej mamy ukazany dość dlugo kod jak na prostą funkcję wyświetlania alerta. Jest dużo składni do zapamiętania i dla początkującego jest to naturalnie niewygodne i nieczytelne.\n \n",
    "subtitle_2": "React \n \n ",
    "img_2":"./img/eventReact.png", 
    "desc_3": "\n Natomiast tutaj widzimy jak proste jest utworzenie prostego alerta, kod jest bardziej schludny i prosty. React również za Ciebie odpina zdarzenia gdy komponent jest niszczony i nie trzeba się tym martwić."
},
  {
      "id": 7,
      "title": "State, setState, stan komponentu",
      "desc": "Co robi state? State służy do przechowywania stanu komponentu. State można mutować dzięki funkcji setState, w porównaniu do prosów które są niemutowalne. Paradoksalnie mozna mutować propsy, ale przyjeła się taka zasada, że nie zmieniamy ich z wnętrza komponentu, do którego zostały przekazane. A, więc na prostym przykładzie możemy pokazać, ze state będzie przechowywać np. licznik. \n \n"
      ,"img": "./img/state1.png",
      "desc_2": "\n Metoda bind pomaga zapewnić, że drugi fragment działa tak samo jak pierwszy."

  }  ,
{
    "id": 8,
    "title": "Importowanie i Eksportowanie",
    "desc": "React Apps są w zasadzie zbiorem interaktywnych komponentów, same komponenty nie wystarczą, aby stworzyć pełnowartościową aplikację React, ponieważ aby stworzyć zbiór komponentów musimy najpierw poznać sposób wykorzystania i ponownego wykorzystania komponentów, które mogły być zdefiniowane gdzie indziej. Aby to zrobić, musimy znać dwie operacje szeroko znane jako Import i Eksport. \n\n",
    "subtitle": "Importowanie",
    "desc_2": "Importujemy domyślny eksport: Mówi się, że każdy moduł ma co najwyżej jeden domyślny eksport. Aby zaimportować domyślny eksport z pliku, możemy użyć tylko adresu i użyć słowa kluczowego, które zostało zaimportowane przed nim, lub możemy nadać nazwę importowi składającemu się na następującą składnię. \n\n import NAZWA from ADRES \n\n Importowanie nazwanych wartości: Każdy moduł może mieć kilka nazwanych parametrów i w celu zaimportowania jednego z nich powinniśmy użyć następującej składni. \n\n import { PARAMETR } from ADRES \n\n Importowanie kombinacji domyślnego eksportu i nazwanych wartości: Z tytułu jasno wynika, że musimy zobaczyć składnię tego samego. Aby zaimportować kombinację, powinniśmy użyć następującej składni. \n\n import NAZWA, { PARAMETR, ..} from ADRES \n\n",
    "img_undertext2": "./img/import.png",
    "subtitle_2": "\nEksportowanie",
    "desc_3": "Teraz, import jest operacją, która wymaga zgody modułu. Importowanie jest możliwe tylko wtedy, gdy moduł lub nazwana właściwość, która ma być zaimportowana, została wyeksportowana w jego deklaracji. W React używamy słowa kluczowego export do wyeksportowania konkretnego modułu, nazwanego parametru lub kombinacji. Zobaczmy teraz różne sposoby, na jakie możemy użyć operacji importu w React. \n\n default export NAZWA \n\n Eksportowanie nazwanych wartości: Każdy moduł może mieć kilka nazwanych parametrów i aby wyeksportować jeden z nich powinniśmy użyć następującej składni. \n\n export {PARAMETR, ...} \n\n I podobnie dla wielokrotnego takiego eksportu możemy użyć przecinka do oddzielenia dwóch parametrów nazwy w obrębie aparatu kręconego. \n\n",
    "img_3": "./img/export.png"
},
    {
        "id": 9,
        "title": "Hooki - hook stanu",
        "desc": "Hook ten jest useStatem, wywołujemy go z wewnątrz kompnentu funkcyjnego, aby wzbogacić go o lokalny stan. React zachowa ten stan pomiędzy kolejnymi renderowaniami. Możesz wywołać te funkcję w procedurze obsługi zdarzenia albo z innego miejsca. Działa to mniej więcej tak samo, jak this.setState w komponencie klasowym, z tą różnicą, że nie scala on starych i nowych wartości. Jedynym argumentem funkcji useState jest stan początkowy. W przeciwieństwie do this.state, stan ten nie musi być obiektem, ale nic nie szkodzi żeby nim był. Wartość która podajemy w argumencie ze stanem początkowym jest wykorzystywana tylko podczas pierwszego renderowania. \n\n  Hooka stanu można użyć kilka razy w tym samym komponencie: \n\n",
        "img_undertext1": "./img/useState.png",
        "desc_2": "\n\n Składnia przypisania destruktyzującego tablic może nadać różne nazwy zmiennym stanu, które zadeklarowaliśmy wywołując funkcję useState."
        ,"subtitle_2": "Czym jest hook dosłownie?",
        "desc_3": "Hooki są funkcjami, które 'zachaczają się' w cylku życia i mechanizmach Reacta. Hooki nie działają w klasach, ale dzięki temu możemy posługiwać się nimi bez klas."
    },
    {
        "id": 10,
        "title": "Hook - hook efektów",
        "desc": "Hook effect, daje możliwość przeprowadzania efektów na zewnątrz komponentu funkcyjnego oraz ma uproszczoną formę interfejsu API w porównaniu do componentDidMount(jest to odpowiednik useEffect dla komponentu klasowego). \n\n",
        "img": "./img/useEffect.png",
        "desc_2": "\n\n Funkcja useEffect, wywołuję twój efekt zaraz po opróżnieniu bufora zmian drzewa DOM. Efekty sa deklarowane wewnątrz kompnentu i dzięki temu mają dostę do propsów i state. React zawsze uruchamia efekty po każdym renderowaniu. Również jak z useState, useEffect można użyć więcej razy niż raz w komponencie."
    }  
]

